// <auto-generated />
using System;
using EventBookingManagementSystem_Backend.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventBookingManagementSystem_Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventBookingManagementSystem_Backend.DB.Entities.Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AssetStatus")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Asset");
                });

            modelBuilder.Entity("EventBookingManagementSystem_Backend.DB.Entities.Asset_Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("ItemId");

                    b.ToTable("Asset_Item");
                });

            modelBuilder.Entity("EventBookingManagementSystem_Backend.DB.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateOnly>("date")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("end_time")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("start_time")
                        .HasColumnType("time");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("EventBookingManagementSystem_Backend.DB.Entities.Booking_Asset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeOnly>("end_time")
                        .HasColumnType("time");

                    b.Property<TimeOnly>("start_time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("BookingId");

                    b.ToTable("Booking_Assets");
                });

            modelBuilder.Entity("EventBookingManagementSystem_Backend.DB.Entities.Booking_Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("PackageId");

                    b.ToTable("Booking_Packages");
                });

            modelBuilder.Entity("EventBookingManagementSystem_Backend.DB.Entities.Booking_Package_Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingPackageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BookingPackageId");

                    b.HasIndex("ItemId");

                    b.ToTable("Booking_Package_Items");
                });

            modelBuilder.Entity("EventBookingManagementSystem_Backend.DB.Entities.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Invoice_No")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateOnly>("date")
                        .HasColumnType("date");

                    b.Property<DateOnly>("due_date")
                        .HasColumnType("date");

                    b.Property<decimal>("total_amount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("EventBookingManagementSystem_Backend.DB.Entities.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemCategoryId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("EventBookingManagementSystem_Backend.DB.Entities.Item_Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Item_Categories");
                });

            modelBuilder.Entity("EventBookingManagementSystem_Backend.DB.Entities.Item_Price", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("assetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("base_price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("price_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ItemId");

                    b.HasIndex("assetId");

                    b.ToTable("ItemPrices");
                });

            modelBuilder.Entity("EventBookingManagementSystem_Backend.DB.Entities.Package", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("EventBookingManagementSystem_Backend.DB.Entities.Package_Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PackageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("ItemId");

                    b.HasIndex("PackageId");

                    b.ToTable("Package_Items");
                });

            modelBuilder.Entity("EventBookingManagementSystem_Backend.DB.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EventBookingManagementSystem_Backend.DB.Entities.Asset_Item", b =>
                {
                    b.HasOne("EventBookingManagementSystem_Backend.DB.Entities.Asset", "Asset")
                        .WithMany("Asset_Items")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventBookingManagementSystem_Backend.DB.Entities.Item", "Item")
                        .WithMany("Asset_Items")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("EventBookingManagementSystem_Backend.DB.Entities.Booking", b =>
                {
                    b.HasOne("EventBookingManagementSystem_Backend.DB.Entities.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("EventBookingManagementSystem_Backend.DB.Entities.Booking_Asset", b =>
                {
                    b.HasOne("EventBookingManagementSystem_Backend.DB.Entities.Asset", "Asset")
                        .WithMany("Booking_Assets")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventBookingManagementSystem_Backend.DB.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("EventBookingManagementSystem_Backend.DB.Entities.Booking_Package", b =>
                {
                    b.HasOne("EventBookingManagementSystem_Backend.DB.Entities.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventBookingManagementSystem_Backend.DB.Entities.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("EventBookingManagementSystem_Backend.DB.Entities.Booking_Package_Item", b =>
                {
                    b.HasOne("EventBookingManagementSystem_Backend.DB.Entities.Booking_Package", "BookingPackage")
                        .WithMany()
                        .HasForeignKey("BookingPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventBookingManagementSystem_Backend.DB.Entities.Item", "Item")
                        .WithMany("Booking_Package_Items")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookingPackage");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("EventBookingManagementSystem_Backend.DB.Entities.Invoice", b =>
                {
                    b.HasOne("EventBookingManagementSystem_Backend.DB.Entities.Booking", "Booking")
                        .WithMany("Invoices")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("EventBookingManagementSystem_Backend.DB.Entities.Item", b =>
                {
                    b.HasOne("EventBookingManagementSystem_Backend.DB.Entities.Item_Category", "ItemCategory")
                        .WithMany("Items")
                        .HasForeignKey("ItemCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemCategory");
                });

            modelBuilder.Entity("EventBookingManagementSystem_Backend.DB.Entities.Item_Price", b =>
                {
                    b.HasOne("EventBookingManagementSystem_Backend.DB.Entities.Item", "Item")
                        .WithMany("Item_Prices")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventBookingManagementSystem_Backend.DB.Entities.Asset", "asset")
                        .WithMany("Item_Prices")
                        .HasForeignKey("assetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("asset");
                });

            modelBuilder.Entity("EventBookingManagementSystem_Backend.DB.Entities.Package_Item", b =>
                {
                    b.HasOne("EventBookingManagementSystem_Backend.DB.Entities.Asset", "Asset")
                        .WithMany("Package_Items")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventBookingManagementSystem_Backend.DB.Entities.Item", "Item")
                        .WithMany("Package_Items")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventBookingManagementSystem_Backend.DB.Entities.Package", "Package")
                        .WithMany("Package_Items")
                        .HasForeignKey("PackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Item");

                    b.Navigation("Package");
                });

            modelBuilder.Entity("EventBookingManagementSystem_Backend.DB.Entities.Asset", b =>
                {
                    b.Navigation("Asset_Items");

                    b.Navigation("Booking_Assets");

                    b.Navigation("Item_Prices");

                    b.Navigation("Package_Items");
                });

            modelBuilder.Entity("EventBookingManagementSystem_Backend.DB.Entities.Booking", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("EventBookingManagementSystem_Backend.DB.Entities.Item", b =>
                {
                    b.Navigation("Asset_Items");

                    b.Navigation("Booking_Package_Items");

                    b.Navigation("Item_Prices");

                    b.Navigation("Package_Items");
                });

            modelBuilder.Entity("EventBookingManagementSystem_Backend.DB.Entities.Item_Category", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("EventBookingManagementSystem_Backend.DB.Entities.Package", b =>
                {
                    b.Navigation("Package_Items");
                });
#pragma warning restore 612, 618
        }
    }
}
